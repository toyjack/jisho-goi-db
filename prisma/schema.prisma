generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  role      Role      @default(USER)

  accounts Account[]
}

model Account {
  id     String @id @default(cuid())
  userId String

  provider          String
  providerAccountId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Hzwm {
  id         String    @id
  location   String?
  type       String?
  entry      String?
  definition String?   @db.VarChar(2000)
  readings   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Wamyouruijyusho {
  id         Int     @id @default(autoincrement())
  // 巻数	
  maki       String?
  // 部	
  bu         String?
  // 類・具・国郡等	
  type       String?
  // 謎	
  type2      String?
  // 丁数表裏行数	
  page       String?
  // 見出し語	
  entry      String?
  // 注文
  definition String? @db.VarChar(2000)
}

model Gyokuhentaizen {
  id             Int     @id @default(autoincrement())
  ghtz_id        String  @unique
  entry          String?
  jion_r         String?
  jion_l         String?
  wakun          String?
  ids            String?
  radical        String?
  remain_strokes String?
}

model Jiruisho {
  id                    Int     @id @default(autoincrement())
  entry                 String?
  entry_expression      String?
  shouten               String?
  hen                   String?
  bu                    String?
  maeda_loc             String?
  maeda_ndl_url         String?
  kurokawa_loc          String?
  kurokawa_ndl_url      String?
  onkun                 String?
  char_count            String?
  gokei_display         String?
  gokei_search_original String?
  gokei_search_current  String?
  remark                String?
  definition            String?
}

model BunmeiSetsuyoshu {
  id                Int     @id @default(autoincrement())
  bunmei_id         String  @unique
  gotou             String?
  entry             String?
  entry_original    String?
  gokei             String?
  gokei_original    String?
  shouten_original  String?
  left_kun_original String?
  defination        String?
  item_type         String?
  bu                String?
  mon               String?
  page              String?
  line              String?
  ndl_link          String?
  remark            String?
  shouten           String?
  left_kun          String?
}

model Racvyoxv {
  id                 Int     @id @default(autoincrement())
  record_creator     String?
  check_kubo         String?
  check_fujimoto     String?
  page               String?
  line               String?
  gallica            String?
  initial_on         String?
  entry              String?
  kanji_pair         String?
  ruby_left_first    String?
  ruby_left_remains  String?
  ruby_right_first   String?
  ruby_right_remains String?
  remark             String?
  nikkoku1_entry     String?
  kanji_pair_length  String?
  nikkoku1_url       String?
  nikkoku2_entry     String?
  nikkoku2_url       String?
  nikkoku3_entry     String?
  nikkoku3_url       String?
  nikkoku4_entry     String?
  nikkoku4_url       String?
  nikkoku5_entry     String?
  nikkoku5_url       String?
  nikkoku6_entry     String?
  nikkoku6_url       String?
  nikkoku7_entry     String?
  nikkoku7_url       String?
  group_entry        String?
}

model Wakunnosiori_Entry {
  id          Int                @id @default(autoincrement())
  entry       String?
  location    String?
  ndl_url     String?
  page        String?
  definitions Wakunnosiori_Def[]
}

model Wakunnosiori_Def {
  id         Int                @id @default(autoincrement())
  index      Int?
  entry_id   Int
  definition String?
  entry      Wakunnosiori_Entry @relation(fields: [entry_id], references: [id])

  @@index([entry_id])
}

model KrmRecord {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?
  KRID_n         String
  KRID_sn        String
  KR2ID          String
  KRID           String
  KR_Tenri_p     String?
  KR_vol_name    String?
  KR_radical     String?
  KR_vol_radical String?
  Entry          String?
  Entry_original String?
  Def            String?   @db.VarChar(2000)
  Remarks        String?   @db.VarChar(2000)
}

model HiGaiji {
  id       Int     @id @default(autoincrement())
  textId   String? @db.VarChar(255)
  manageId String? @db.VarChar(255)
  gaiji    String? @db.VarChar(255)
  char1    String? @db.VarChar(255)
  unicode  String? @db.VarChar(255)
  char2    String? @db.VarChar(255)
  matched  String? @db.VarChar(255)
  remark   String? @db.VarChar(255)
  imageUrl String? @db.VarChar(255)
}

model OudanKanjionItem {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  book_id     String
  book_name   String
  char_id     Int
  word_id     Int
  char        String
  word        String
  char_index  Int
  beat_count  Int?
  shoten      String?
  shoten_type String?
  ruby        String?
  ruby_all    String?
  fanqie      String?
  ruion       String?
  etc         String?
  location    String?
  remarks     String?
}

model OudankanjionBook {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  bookId          String   @unique
  bookInformation String
  bookName        String
  inputLegend     String
  inputer         String
  jionInformation String
  possession      String
  references      String
  time            String
  timeDesc        String?
}

model GlyphData {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  name      String    @unique
  related   String?
  data      String?   @db.Text
}

model hi_gaiji_comfirm_20230707 {
  textId       String? @db.LongText
  ctlId        String? @db.VarChar(255)
  mojikyo      String? @db.VarChar(255)
  char1        String? @db.VarChar(255)
  char1Unicode String? @db.VarChar(255)
  char2        String? @db.VarChar(255)
  liuComment   String? @db.VarChar(255)
  remark       String? @db.VarChar(255)
  loc          String? @db.VarChar(255)
  url          String? @db.LongText
  id           Int     @id

  @@map("hi-gaiji-comfirm-20230707")
}

enum Role {
  USER
  ADVANCED_USER
  ADMIN
}

model DBManual {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @unique
  full_name String?
  article   String?   @db.LongText
}
